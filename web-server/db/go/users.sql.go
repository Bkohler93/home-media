// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(user_name, pw_hash)
VALUES ($1,$2)
RETURNING id, user_name, pw_hash
`

type CreateUserParams struct {
	UserName string
	PwHash   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserName, arg.PwHash)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.PwHash)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, pw_hash FROM users WHERE id=$1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.PwHash)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, user_name, pw_hash FROM users WHERE user_name=$1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.PwHash)
	return i, err
}
