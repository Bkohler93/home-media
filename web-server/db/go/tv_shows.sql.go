// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tv_shows.sql

package db

import (
	"context"
	"database/sql"
)

const createTVShow = `-- name: CreateTVShow :one
INSERT INTO tv_shows
(name, season_number, file_path, episode_number, release_year)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, name, season_number, episode_number, file_path, release_year, img_url
`

type CreateTVShowParams struct {
	Name          string
	SeasonNumber  int32
	FilePath      string
	EpisodeNumber int32
	ReleaseYear   int32
}

func (q *Queries) CreateTVShow(ctx context.Context, arg CreateTVShowParams) (TvShow, error) {
	row := q.db.QueryRowContext(ctx, createTVShow,
		arg.Name,
		arg.SeasonNumber,
		arg.FilePath,
		arg.EpisodeNumber,
		arg.ReleaseYear,
	)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SeasonNumber,
		&i.EpisodeNumber,
		&i.FilePath,
		&i.ReleaseYear,
		&i.ImgUrl,
	)
	return i, err
}

const createTVShowWatch = `-- name: CreateTVShowWatch :exec
INSERT INTO 
    has_watched_tv
    (tv_id, user_id)
VALUES (
    $1,
    (SELECT u.id FROM users u WHERE u.user_name = $2)
)
`

type CreateTVShowWatchParams struct {
	TvID     int32
	UserName string
}

func (q *Queries) CreateTVShowWatch(ctx context.Context, arg CreateTVShowWatchParams) error {
	_, err := q.db.ExecContext(ctx, createTVShowWatch, arg.TvID, arg.UserName)
	return err
}

const deleteTVShow = `-- name: DeleteTVShow :one
DELETE FROM tv_shows WHERE id=$1 RETURNING file_path
`

func (q *Queries) DeleteTVShow(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteTVShow, id)
	var file_path string
	err := row.Scan(&file_path)
	return file_path, err
}

const deleteTVShowWatch = `-- name: DeleteTVShowWatch :exec
DELETE FROM 
    has_watched_tv
WHERE 
    tv_id = $1 
    AND
    user_id = (SELECT u.id FROM users u WHERE u.user_name = $2)
`

type DeleteTVShowWatchParams struct {
	TvID     int32
	UserName string
}

func (q *Queries) DeleteTVShowWatch(ctx context.Context, arg DeleteTVShowWatchParams) error {
	_, err := q.db.ExecContext(ctx, deleteTVShowWatch, arg.TvID, arg.UserName)
	return err
}

const getTVShows = `-- name: GetTVShows :many
SELECT 
	tv.id, 
    tv.release_year,
    tv.img_url,
    tv.season_number,
    tv.episode_number,
    tv.file_path,
	tv.name, 
	CAST(hwt.user_id IS NOT NULL AS BOOLEAN) AS has_watched 
FROM 
	tv_shows tv 
LEFT JOIN 
	has_watched_tv hwt 
ON 
	hwt.tv_id = tv.id AND hwt.user_id = (
	SELECT u.id FROM users u WHERE u.user_name = $1)
`

type GetTVShowsRow struct {
	ID            int32
	ReleaseYear   int32
	ImgUrl        sql.NullString
	SeasonNumber  int32
	EpisodeNumber int32
	FilePath      string
	Name          string
	HasWatched    bool
}

func (q *Queries) GetTVShows(ctx context.Context, userName string) ([]GetTVShowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTVShows, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTVShowsRow
	for rows.Next() {
		var i GetTVShowsRow
		if err := rows.Scan(
			&i.ID,
			&i.ReleaseYear,
			&i.ImgUrl,
			&i.SeasonNumber,
			&i.EpisodeNumber,
			&i.FilePath,
			&i.Name,
			&i.HasWatched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
