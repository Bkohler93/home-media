// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package db

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies
(title, release_year, file_path)
VALUES ($1,$2,$3)
RETURNING id, title, release_year, file_path, img_url
`

type CreateMovieParams struct {
	Title       string
	ReleaseYear int32
	FilePath    string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Title, arg.ReleaseYear, arg.FilePath)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseYear,
		&i.FilePath,
		&i.ImgUrl,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one

SELECT id, title, release_year, file_path, img_url FROM movies WHERE id=$1
`

// -- name: GetMovies :many
// SELECT * FROM movies;
func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseYear,
		&i.FilePath,
		&i.ImgUrl,
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT 
	m.id, 
    m.release_year,
    m.img_url,
    m.file_path,
	m.title, 
	CAST(hwm.user_id IS NOT NULL AS BOOLEAN) AS has_watched 
FROM 
	movies m 
LEFT JOIN 
	has_watched_movie hwm 
ON 
	m.id = hwm.movie_id AND hwm.user_id = (
	SELECT id FROM users WHERE user_name = $1)
`

type GetMoviesRow struct {
	ID          int32
	ReleaseYear int32
	ImgUrl      sql.NullString
	FilePath    string
	Title       string
	HasWatched  bool
}

func (q *Queries) GetMovies(ctx context.Context, userName string) ([]GetMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMovies, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMoviesRow
	for rows.Next() {
		var i GetMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.ReleaseYear,
			&i.ImgUrl,
			&i.FilePath,
			&i.Title,
			&i.HasWatched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
